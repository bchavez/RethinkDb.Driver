














//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591 // Missing XML comment for publicly visible type or member
// ReSharper disable CheckNamespace

using System;
using RethinkDb.Driver.Ast;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Proto;
using System.Collections;
using System.Collections.Generic;


namespace RethinkDb.Driver.Ast {

    public partial class Db : ReqlAst {

    
    
    
/// <summary>
/// <para>Reference a database.</para>
/// </summary>
/// <example><para>Example: Explicitly specify a database for a query.</para>
/// <code>r.db('heroes').table('marvel').run(conn, callback)
/// </code></example>
        public Db (object arg) : this(new Arguments(arg), null) {
        }
/// <summary>
/// <para>Reference a database.</para>
/// </summary>
/// <example><para>Example: Explicitly specify a database for a query.</para>
/// <code>r.db('heroes').table('marvel').run(conn, callback)
/// </code></example>
        public Db (Arguments args) : this(args, null) {
        }
/// <summary>
/// <para>Reference a database.</para>
/// </summary>
/// <example><para>Example: Explicitly specify a database for a query.</para>
/// <code>r.db('heroes').table('marvel').run(conn, callback)
/// </code></example>
        public Db (Arguments args, OptArgs optargs)
         : base(TermType.DB, args, optargs) {
        }


    



    


    

    


    

    

/// <summary>
/// <para>Select all documents in a table. This command can be chained with other commands to do
/// further processing on the data.</para>
/// </summary>
/// <example><para>Example: Return all documents in the table 'marvel' of the default database.</para>
/// <code>r.table('marvel').run(conn, callback)
/// </code></example>
                        public Table Table ( Object expr )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(expr);
                            return new Table (arguments );
                        }
                        internal Table table ( Object expr )
                        {
                           return Table ( expr );
                        }
/// <summary>
/// <para>Create a table. A RethinkDB table is a collection of JSON documents.</para>
/// </summary>
/// <example><para>Example: Create a table named 'dc_universe' with the default settings.</para>
/// <code>r.db('test').tableCreate('dc_universe').run(conn, callback)
/// </code></example>
                        public TableCreate TableCreate ( Object expr )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(expr);
                            return new TableCreate (arguments );
                        }
                        internal TableCreate tableCreate ( Object expr )
                        {
                           return TableCreate ( expr );
                        }
/// <summary>
/// <para>Drop a table. The table and all its data will be deleted.</para>
/// </summary>
/// <example><para>Example: Drop a table named 'dc_universe'.</para>
/// <code>r.db('test').tableDrop('dc_universe').run(conn, callback)
/// </code></example>
                        public TableDrop TableDrop ( Object expr )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(expr);
                            return new TableDrop (arguments );
                        }
                        internal TableDrop tableDrop ( Object expr )
                        {
                           return TableDrop ( expr );
                        }
/// <summary>
/// <para>List all table names in a database. The result is a list of strings.</para>
/// </summary>
/// <example><para>Example: List all tables of the 'test' database.</para>
/// <code>r.db('test').tableList().run(conn, callback)
/// </code></example>
                        public TableList TableList (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new TableList (arguments );
                        }
                        internal TableList tableList (  )
                        {
                           return TableList (  );
                        }
/// <summary>
/// <para>Query (read and/or update) the configurations for individual tables or databases.</para>
/// </summary>
/// <example><para>Example: Get the configuration for the <code>users</code> table.</para>
/// <code>&gt; r.table('users').config().run(conn, callback);
/// </code></example>
                        public Config Config (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Config (arguments );
                        }
                        internal Config config (  )
                        {
                           return Config (  );
                        }
/// <summary>
/// <para>Wait for a table or all the tables in a database to be ready. A table may be temporarily unavailable after creation, rebalancing or reconfiguring. The <code>wait</code> command blocks until the given table (or database) is fully up to date.</para>
/// </summary>
/// <example><para>Example: Wait for a table to be ready.</para>
/// <code>&gt; r.table('superheroes').wait().run(conn, callback);
/// </code></example>
                        public Wait Wait_ (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Wait (arguments );
                        }
                        internal Wait wait_ (  )
                        {
                           return Wait_ (  );
                        }
/// <summary>
/// <para>Reconfigure a table's sharding and replication.</para>
/// </summary>
/// <example><para>Example: Reconfigure a table.</para>
/// <code>&gt; r.table('superheroes').reconfigure({shards: 2, replicas: 1}).run(conn, callback);
/// </code></example>
                        public Reconfigure Reconfigure (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Reconfigure (arguments );
                        }
                        internal Reconfigure reconfigure (  )
                        {
                           return Reconfigure (  );
                        }
/// <summary>
/// <para>Rebalances the shards of a table. When called on a database, all the tables in that database will be rebalanced.</para>
/// </summary>
/// <example><para>Example: Rebalance a table.</para>
/// <code>&gt; r.table('superheroes').rebalance().run(conn, callback);
/// </code></example>
                        public Rebalance Rebalance (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Rebalance (arguments );
                        }
                        internal Rebalance rebalance (  )
                        {
                           return Rebalance (  );
                        }
                        public Grant Grant ( Object expr, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(expr);
                            arguments.CoerceAndAdd(exprA);
                            return new Grant (arguments );
                        }
                        internal Grant grant ( Object expr, Object exprA )
                        {
                           return Grant ( expr, exprA );
                        }
/// <summary>
/// <para>Get information about a ReQL value.</para>
/// </summary>
/// <example><para>Example: Get information about a table such as primary key, or cache size.</para>
/// <code>r.table('marvel').info().run(conn, callback)
/// </code></example>
                        public Info Info (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Info (arguments );
                        }
                        internal Info info (  )
                        {
                           return Info (  );
                        }

    
    }
}
