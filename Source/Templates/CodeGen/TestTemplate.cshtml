@using System
@using System.Collections.Generic
@using System.Linq
@using Humanizer
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using NUnit.Framework.Constraints
@using Templates
@using Templates.CodeGen.Util
@using Templates.Metadata
@using Z.ExtensionMethods

@inherits Templates.CodeGen.BaseTemplate

@functions {
    public YamlTest YamlTest { get; set; }
    protected List<string> renderedVars = new List<string>();
}


//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591 // Missing XML comment for publicly visible type or member
#pragma warning disable 219 //The variable 'lower_limit' is assigned but its value is never used
// ReSharper disable CheckNamespace

using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Ast;
using NUnit.Framework;
using RethinkDb.Driver.Tests;
using static RethinkDb.Driver.Tests.TestingCommon;

namespace RethinkDb.Driver.Test.Generated {

    // @YamlTest.Description

    [TestFixture]
    public class @YamlTest.ModuleName : YamlTestFixture {

        public @YamlTest.ModuleName (){
            @foreach (var table in this.YamlTest.TableVarNames)
            {
                @:tableVars.Add( "@table" );
            }
        }


        @foreach( var table in this.YamlTest.TableVarNames )
        {
            @:public static Table @table = r.db(DbName).table("@table");
        }


        [Test]
        public void @($"YamlTest_"+YamlTest.ModuleName)(){

     @foreach( var test in this.YamlTest.DefsAndTests )
     {
         if( test.TestType == "JavaDef" )
         {
             @:
             @://JavaDef, @test.TestFile, #@test.LineNum
             @://Original: @test.Original
             @:
             if( @renderedVars.Contains(test.VarName) )
             {
                 @:@test.VarName = @( test.RunIfQuery ? "maybeRun" : "") (@test.Value);
             }
             else if( test.RunIfQuery )
             {
                 @:var @test.VarName = maybeRun( @test.Value , conn, new {
                 foreach (var opt in test.RunOpts)
                 {
                    @:@opt.Key = @(opt.Val.IsNumber(0) || opt.Val.IsNumber(1) ? opt.Val : $"\"{opt.Val}\"" ) ,
                 }
                 @: } );
                 renderedVars.Add(@test.VarName);
             }
             else
             {
                 @:@( test.VarType.Contains("ReqlFunction") ? test.VarType : "var" ) @test.VarName = @test.Value;
                 renderedVars.Add(@test.VarName);
             }
             @:
         }
         else if( test.TestType == "JavaQuery" )
         {
             @:{
                 @:SetContext( "@(JsonConvert.SerializeObject(test).EncodeBase64())" );
                 @://JavaQuery, @test.TestFile, #@test.LineNum
                 @:/* ExpectedOriginal: @test.ExpectedOriginal */
                 @:var expected_ = @(test.ExpectedJava ?? "null as object");
                 @:
                 @:/* Original: @test.Original */
                 @:var obtained = runOrCatch( @test.Java ,
                 @:                           new {
                 foreach( var opt in test.RunOpts )
                 {
                     @:@opt.Key = @(opt.Val.IsNumber(0) || opt.Val.IsNumber(1) ?  opt.Val : $"\"{opt.Val}\"" ) ,
                 }
                 @:   }, conn);
                 
                 @:
                 if( @test.ExpectedType.EndsWith("[]") )
                 {
                     @:assertArrayEquals(expected_, obtained);
                 }
                 else if( test.ExpectedType == "double" )
                 {
                     @:assertEquals((double) expected_, (double) obtained, 0.00000000001);
                 }
                 else
                 {
                     @:assertEquals(expected_, obtained);                 
                 }
             @:}
             @:
         }
     }

        }
    }
}
