#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Templates.CodeGen
{
    
    #line 1 "..\..\CodeGen\TestTemplate.cshtml"
    using System;
    
    #line default
    #line hidden
    
    #line 2 "..\..\CodeGen\TestTemplate.cshtml"
    using System.Collections.Generic;
    
    #line default
    #line hidden
    
    #line 3 "..\..\CodeGen\TestTemplate.cshtml"
    using System.Linq;
    
    #line default
    #line hidden
    using System.Text;
    
    #line 4 "..\..\CodeGen\TestTemplate.cshtml"
    using Humanizer;
    
    #line default
    #line hidden
    
    #line 5 "..\..\CodeGen\TestTemplate.cshtml"
    using Newtonsoft.Json;
    
    #line default
    #line hidden
    
    #line 6 "..\..\CodeGen\TestTemplate.cshtml"
    using Newtonsoft.Json.Linq;
    
    #line default
    #line hidden
    
    #line 7 "..\..\CodeGen\TestTemplate.cshtml"
    using NUnit.Framework.Constraints;
    
    #line default
    #line hidden
    
    #line 8 "..\..\CodeGen\TestTemplate.cshtml"
    using Templates;
    
    #line default
    #line hidden
    
    #line 9 "..\..\CodeGen\TestTemplate.cshtml"
    using Templates.CodeGen.Util;
    
    #line default
    #line hidden
    
    #line 10 "..\..\CodeGen\TestTemplate.cshtml"
    using Templates.Metadata;
    
    #line default
    #line hidden
    
    #line 11 "..\..\CodeGen\TestTemplate.cshtml"
    using Z.ExtensionMethods;
    
    #line default
    #line hidden
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    public partial class TestTemplate : Templates.CodeGen.BaseTemplate
    {
#line hidden

        #line 15 "..\..\CodeGen\TestTemplate.cshtml"

    public YamlTest YamlTest { get; set; }
    protected List<string> renderedVars = new List<string>();

        #line default
        #line hidden

        public override void Execute()
        {











WriteLiteral("\r\n");


WriteLiteral("\r\n");


WriteLiteral(@"


//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591 // Missing XML comment for publicly visible type or member
#pragma warning disable 219 //The variable 'lower_limit' is assigned but its value is never used
// ReSharper disable CheckNamespace

using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Ast;
using NUnit.Framework;
using RethinkDb.Driver.Tests;
using static RethinkDb.Driver.Tests.TestingCommon;

namespace RethinkDb.Driver.Test.Generated {

    // ");


            
            #line 40 "..\..\CodeGen\TestTemplate.cshtml"
  Write(YamlTest.Description);

            
            #line default
            #line hidden
WriteLiteral("\r\n\r\n    [TestFixture]\r\n    public class ");


            
            #line 43 "..\..\CodeGen\TestTemplate.cshtml"
            Write(YamlTest.ModuleName);

            
            #line default
            #line hidden
WriteLiteral(" : YamlTestFixture {\r\n\r\n        public ");


            
            #line 45 "..\..\CodeGen\TestTemplate.cshtml"
          Write(YamlTest.ModuleName);

            
            #line default
            #line hidden
WriteLiteral(" (){\r\n");


            
            #line 46 "..\..\CodeGen\TestTemplate.cshtml"
             foreach (var table in this.YamlTest.TableVarNames)
            {

            
            #line default
            #line hidden
WriteLiteral("                ");

WriteLiteral("tableVars.Add( \"");


            
            #line 48 "..\..\CodeGen\TestTemplate.cshtml"
                             Write(table);

            
            #line default
            #line hidden
WriteLiteral("\" );\r\n");


            
            #line 49 "..\..\CodeGen\TestTemplate.cshtml"
            }

            
            #line default
            #line hidden
WriteLiteral("        }\r\n\r\n\r\n");


            
            #line 53 "..\..\CodeGen\TestTemplate.cshtml"
         foreach( var table in this.YamlTest.TableVarNames )
        {

            
            #line default
            #line hidden
WriteLiteral("            ");

WriteLiteral("public static Table ");


            
            #line 55 "..\..\CodeGen\TestTemplate.cshtml"
                             Write(table);

            
            #line default
            #line hidden
WriteLiteral(" = r.db(DbName).table(\"");


            
            #line 55 "..\..\CodeGen\TestTemplate.cshtml"
                                                          Write(table);

            
            #line default
            #line hidden
WriteLiteral("\");\r\n");


            
            #line 56 "..\..\CodeGen\TestTemplate.cshtml"
        }

            
            #line default
            #line hidden
WriteLiteral("\r\n\r\n        [Test]\r\n        public void ");


            
            #line 60 "..\..\CodeGen\TestTemplate.cshtml"
                Write($"YamlTest_"+YamlTest.ModuleName);

            
            #line default
            #line hidden
WriteLiteral("(){\r\n\r\n");


            
            #line 62 "..\..\CodeGen\TestTemplate.cshtml"
      foreach( var test in this.YamlTest.DefsAndTests )
     {
         if( test.TestType == "JavaDef" )
         {

            
            #line default
            #line hidden
WriteLiteral("             ");

WriteLiteral("\r\n");



WriteLiteral("             ");

WriteLiteral("//JavaDef, ");


            
            #line 67 "..\..\CodeGen\TestTemplate.cshtml"
                     Write(test.TestFile);

            
            #line default
            #line hidden
WriteLiteral(", #");


            
            #line 67 "..\..\CodeGen\TestTemplate.cshtml"
                                      Write(test.LineNum);

            
            #line default
            #line hidden
WriteLiteral("\r\n");



WriteLiteral("             ");

WriteLiteral("//Original: ");


            
            #line 68 "..\..\CodeGen\TestTemplate.cshtml"
                      Write(test.Original);

            
            #line default
            #line hidden
WriteLiteral("\r\n");



WriteLiteral("             ");

WriteLiteral("\r\n");


            
            #line 70 "..\..\CodeGen\TestTemplate.cshtml"
             if( @renderedVars.Contains(test.VarName) )
             {

            
            #line default
            #line hidden
WriteLiteral("                 ");


            
            #line 72 "..\..\CodeGen\TestTemplate.cshtml"
              Write(test.VarName);

            
            #line default
            #line hidden
WriteLiteral(" = ");


            
            #line 72 "..\..\CodeGen\TestTemplate.cshtml"
                               Write( test.RunIfQuery ? "maybeRun" : "");

            
            #line default
            #line hidden
WriteLiteral(" (");


            
            #line 72 "..\..\CodeGen\TestTemplate.cshtml"
                                                                     Write(test.Value);

            
            #line default
            #line hidden
WriteLiteral(");\r\n");


            
            #line 73 "..\..\CodeGen\TestTemplate.cshtml"
             }
             else if( test.RunIfQuery )
             {

            
            #line default
            #line hidden
WriteLiteral("                 ");

WriteLiteral("var ");


            
            #line 76 "..\..\CodeGen\TestTemplate.cshtml"
                  Write(test.VarName);

            
            #line default
            #line hidden
WriteLiteral(" = maybeRun( ");


            
            #line 76 "..\..\CodeGen\TestTemplate.cshtml"
                                            Write(test.Value);

            
            #line default
            #line hidden
WriteLiteral(" , conn, new {\r\n");


            
            #line 77 "..\..\CodeGen\TestTemplate.cshtml"
                 foreach (var opt in test.RunOpts)
                 {

            
            #line default
            #line hidden
WriteLiteral("                    ");


            
            #line 79 "..\..\CodeGen\TestTemplate.cshtml"
                 Write(opt.Key);

            
            #line default
            #line hidden
WriteLiteral(" = ");


            
            #line 79 "..\..\CodeGen\TestTemplate.cshtml"
                             Write(opt.Val.IsNumber(0) || opt.Val.IsNumber(1) ? opt.Val : $"\"{opt.Val}\"" );

            
            #line default
            #line hidden
WriteLiteral(" ,\r\n");


            
            #line 80 "..\..\CodeGen\TestTemplate.cshtml"
                 }

            
            #line default
            #line hidden
WriteLiteral("                 ");

WriteLiteral(" } );\r\n");


            
            #line 82 "..\..\CodeGen\TestTemplate.cshtml"
                 renderedVars.Add(@test.VarName);
             }
             else
             {

            
            #line default
            #line hidden
WriteLiteral("                 ");


            
            #line 86 "..\..\CodeGen\TestTemplate.cshtml"
               Write( test.VarType.Contains("ReqlFunction") ? test.VarType : "var" );

            
            #line default
            #line hidden
WriteLiteral(" ");


            
            #line 86 "..\..\CodeGen\TestTemplate.cshtml"
                                                                                Write(test.VarName);

            
            #line default
            #line hidden
WriteLiteral(" = ");


            
            #line 86 "..\..\CodeGen\TestTemplate.cshtml"
                                                                                                Write(test.Value);

            
            #line default
            #line hidden
WriteLiteral(";\r\n");


            
            #line 87 "..\..\CodeGen\TestTemplate.cshtml"
                 renderedVars.Add(@test.VarName);
             }

            
            #line default
            #line hidden
WriteLiteral("             ");

WriteLiteral("\r\n");


            
            #line 90 "..\..\CodeGen\TestTemplate.cshtml"
         }
         else if( test.TestType == "JavaQuery" )
         {

            
            #line default
            #line hidden
WriteLiteral("             ");

WriteLiteral("{\r\n");



WriteLiteral("                 ");

WriteLiteral("SetContext( \"");


            
            #line 94 "..\..\CodeGen\TestTemplate.cshtml"
                            Write(JsonConvert.SerializeObject(test).EncodeBase64());

            
            #line default
            #line hidden
WriteLiteral("\" );\r\n");



WriteLiteral("                 ");

WriteLiteral("//JavaQuery, ");


            
            #line 95 "..\..\CodeGen\TestTemplate.cshtml"
                           Write(test.TestFile);

            
            #line default
            #line hidden
WriteLiteral(", #");


            
            #line 95 "..\..\CodeGen\TestTemplate.cshtml"
                                            Write(test.LineNum);

            
            #line default
            #line hidden
WriteLiteral("\r\n");



WriteLiteral("                 ");

WriteLiteral("/* ExpectedOriginal: ");


            
            #line 96 "..\..\CodeGen\TestTemplate.cshtml"
                                   Write(test.ExpectedOriginal);

            
            #line default
            #line hidden
WriteLiteral(" */\r\n");



WriteLiteral("                 ");

WriteLiteral("var expected_ = ");


            
            #line 97 "..\..\CodeGen\TestTemplate.cshtml"
                               Write(test.ExpectedJava ?? "null as object");

            
            #line default
            #line hidden
WriteLiteral(";\r\n");



WriteLiteral("                 ");

WriteLiteral("\r\n");



WriteLiteral("                 ");

WriteLiteral("/* Original: ");


            
            #line 99 "..\..\CodeGen\TestTemplate.cshtml"
                           Write(test.Original);

            
            #line default
            #line hidden
WriteLiteral(" */\r\n");



WriteLiteral("                 ");

WriteLiteral("var obtained = runOrCatch( ");


            
            #line 100 "..\..\CodeGen\TestTemplate.cshtml"
                                         Write(test.Java);

            
            #line default
            #line hidden
WriteLiteral(" ,\r\n");



WriteLiteral("                 ");

WriteLiteral("                           new {\r\n");


            
            #line 102 "..\..\CodeGen\TestTemplate.cshtml"
                 foreach( var opt in test.RunOpts )
                 {

            
            #line default
            #line hidden
WriteLiteral("                     ");


            
            #line 104 "..\..\CodeGen\TestTemplate.cshtml"
                  Write(opt.Key);

            
            #line default
            #line hidden
WriteLiteral(" = ");


            
            #line 104 "..\..\CodeGen\TestTemplate.cshtml"
                              Write(opt.Val.IsNumber(0) || opt.Val.IsNumber(1) ?  opt.Val : $"\"{opt.Val}\"" );

            
            #line default
            #line hidden
WriteLiteral(" ,\r\n");


            
            #line 105 "..\..\CodeGen\TestTemplate.cshtml"
                 }

            
            #line default
            #line hidden
WriteLiteral("                 ");

WriteLiteral("   }, conn);\r\n");


            
            #line 107 "..\..\CodeGen\TestTemplate.cshtml"
                 

            
            #line default
            #line hidden
WriteLiteral("                 ");

WriteLiteral("\r\n");


            
            #line 109 "..\..\CodeGen\TestTemplate.cshtml"
                 if( @test.ExpectedType.EndsWith("[]") )
                 {

            
            #line default
            #line hidden
WriteLiteral("                     ");

WriteLiteral("assertArrayEquals(expected_, obtained);\r\n");


            
            #line 112 "..\..\CodeGen\TestTemplate.cshtml"
                 }
                 else if( test.ExpectedType == "double" )
                 {

            
            #line default
            #line hidden
WriteLiteral("                     ");

WriteLiteral("assertEquals((double) expected_, (double) obtained, 0.00000000001);\r\n");


            
            #line 116 "..\..\CodeGen\TestTemplate.cshtml"
                 }
                 else
                 {

            
            #line default
            #line hidden
WriteLiteral("                     ");

WriteLiteral("assertEquals(expected_, obtained);                 \r\n");


            
            #line 120 "..\..\CodeGen\TestTemplate.cshtml"
                 }

            
            #line default
            #line hidden
WriteLiteral("             ");

WriteLiteral("}\r\n");



WriteLiteral("             ");

WriteLiteral("\r\n");


            
            #line 123 "..\..\CodeGen\TestTemplate.cshtml"
         }
     }

            
            #line default
            #line hidden
WriteLiteral("\r\n        }\r\n    }\r\n}\r\n");


        }
    }
}
#pragma warning restore 1591
